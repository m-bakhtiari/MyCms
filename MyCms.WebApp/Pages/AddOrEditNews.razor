@page "/AddOrEditNews/{Title}/{CategoryId?}/{Id?}"

@using MyCms.WebApp.Models
@using System.Text
@using System.Text.Json
@using System.Net.Http.Headers
@using System.Net
@using MyCms.Domain.Dto
@using MyCms.WebApp.Services.Interfaces
@using Tewr.Blazor.FileReader
@using System.IO
@inject ILocalStorageService _localStorageService
@inject NavigationManager _navigationManager
@inject IFileReaderService _fileReaderService;

<LoginModal @ref="@LoginModal"></LoginModal>
<div class="container mt-4">
    <h3>@Title</h3>
    <div class="row">
        <label>عنوان</label>
        <input type="text" class="form-group" @bind="News.Title" />
        <input type="hidden" @bind="News.Id" />
    </div>
    <div class="row">
        <label>گروه بندی خبر</label>
        <select @bind="@News.CategoryId">
            @foreach (var item in CategoryDto.Items)
            {
                <option value="@item.Id">@item.Title</option>
            }
        </select>
    </div>
    <div class="row">
        <label>کلمات کلیدی</label>
        <input type="text" class="form-group" @bind="News.Tags" />
    </div>
    <div class="row">
        <label>توضیح مختصر</label>
        <input type="text" class="form-group" @bind="News.ShortDescription" />
    </div>
    <div class="row">
        <label>متن کامل خبر</label>
        <textarea class="form-group" @bind="News.Description"></textarea>
    </div>
    <div class="row">
        <label>عکس</label>
        <input type="file" @ref="_elementReference" @onchange="async ()=>await OpenFileAsync()" />
        @if (string.IsNullOrWhiteSpace(News.ImageName)==false)
        {
            <label>عکس فعلی</label>
            <img src="img/NewsImage/@News.ImageName"/>
        }
        <button @onclick="async ()=>await UploadFileAsync()">Upload</button>
        <div>
            <p>نام عکس : @_fileName</p>
            <p>سایز عکس : @_size</p>
            <p>@_message</p>
        </div>
    </div>
    <div class="row">
        <button type="button" class="btn bg-success" @onclick="SubmitForm">ذخیره</button>
    </div>
</div>

@code
{
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string CategoryId { get; set; }
    [Parameter]
    public string Title { get; set; }

    private NewsViewModel News { get; set; } = new NewsViewModel();
    private LoginModal LoginModal { get; set; }
    public PagedResult<CategoryDto, CategorySearchItem> CategoryDto { get; set; } = new PagedResult<CategoryDto, CategorySearchItem>() { Items = new List<CategoryDto>() };


    protected override async Task OnParametersSetAsync()
    {
        Title = Title;
        if (Id == null)
        {
            CategoryId = CategoryId;
            News.CategoryId = int.Parse(CategoryId);
        }
        else
        {
            Id = Id;
            News = await _http.GetFromJsonAsync<NewsViewModel>(Const.ApiSiteUrl + $"/api/News/{Id}");
        }
        CategoryDto = await _http.GetFromJsonAsync<PagedResult<CategoryDto, CategorySearchItem>>(Const.ApiSiteUrl + "/api/Category");
    }

    private async Task SubmitForm()
    {
        News.Id ??= 0;
        var request = new HttpRequestMessage()
        {
            Content = new StringContent(JsonSerializer.Serialize(News), Encoding.UTF8, "application/json"),
        };
        if (News.Id == 0)
        {
            request.Method = new HttpMethod("POST");
            request.RequestUri = new Uri(Const.ApiSiteUrl + "/api/News");
        }
        else
        {
            request.Method = new HttpMethod("PUT");
            request.RequestUri = new Uri(Const.ApiSiteUrl + $"/api/News/{News.Id}");
        }
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItem<string>("Token"));
        using var response = await _http.SendAsync(request);
        if (response.StatusCode == HttpStatusCode.Unauthorized)
        {
            LoginModal.Open();
        }
        else if (response.StatusCode == HttpStatusCode.OK)
        {
            _navigationManager.NavigateTo($"/ManageNews/{CategoryId}", true);
        }
    }

    private ElementReference _elementReference = new ElementReference();
    private readonly string _message = string.Empty;
    private string _fileName = string.Empty;
    private string _size = string.Empty;
    private string _imagePath = null;
    private Stream _fileStream = null;

    private async Task OpenFileAsync()
    {
        var file = (await _fileReaderService.CreateReference(_elementReference).EnumerateFilesAsync()).FirstOrDefault();
        if (file == null) return;
        var fileInfo = await file.ReadFileInfoAsync();
        _fileName = fileInfo.Name;
        _size = fileInfo.Size.ToString();
        await using var memoryStream = await file.CreateMemoryStreamAsync((int)fileInfo.Size);
        _fileStream = new MemoryStream(memoryStream.ToArray());
    }

    private async Task UploadFileAsync()
    {
        var content = new MultipartFormDataContent();
        content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-date");
        content.Add(new StreamContent(_fileStream, (int)_fileStream.Length), "image", _fileName);
        var response = await _http.PostAsync(Const.ApiSiteUrl + "/api/File", content);
        News.ImageName = await response.Content.ReadAsStringAsync();
        Console.WriteLine(News.ImageName);
    }
}
