@page "/NewsDetails/{Id}"
@using MyCms.Domain.Dto
@using MyCms.WebApp.Models

<Breadcrumbs CategoryTitle="@NewsDto.CategoryTitle" CategoryId="@NewsDto.CategoryId"></Breadcrumbs>
<div class="main-container container" id="main-container">
    <div class="row">
        <div class="col-lg-8 blog__content mb-72">
            <div class="content-box">
                <ArticleDetails NewsDto="@NewsDto"></ArticleDetails>
                <div class="entry-comments">
                    <div class="title-wrap title-wrap--line">
                        <h3 class="section-title">@Comment.Items.Count دیدگاه</h3>
                    </div>
                    @foreach (var item in Comment.Items)
                    {
                        <ShowComment ResponseComment="@Comment.Items.FirstOrDefault(c=>c.ParentId==item.Id)" NewsCommentDto="@item"></ShowComment>
                    }
                </div>
                <nav class="pagination">
                    @for (var i = 1; i <= PageCount; i++)
                    {
                        var j = i;
                        <a style="cursor: pointer" class="pagination__page
                           @(PageId==i?"pagination__page--current text-light":"") fw-bold" @onclick="()=>MoveToPage(j)">@i</a>
                    }
                </nav>
                <AddComment Id="@int.Parse(Id)"></AddComment>
            </div>
        </div>
        <FavoriteNewsBar></FavoriteNewsBar>
    </div>
</div>

@code
{
    [Parameter]
    public string Id { get; set; }

    public NewsDto NewsDto { get; set; } = new NewsDto();

    private int PageId { get; set; } = 1;
    private int PageCount { get; set; }

    public PagedResult<NewsCommentDto, NewsCommentSearchItem> Comment { get; set; } = new PagedResult<NewsCommentDto, NewsCommentSearchItem>() { Items = new List<NewsCommentDto>() };

    protected override async Task OnParametersSetAsync()
    {
        await GetPageData();
    }

    private async Task MoveToPage(int pageId)
    {
        PageId = pageId;
        await GetPageData();
    }

    private async Task GetPageData()
    {
        Id = Id;
        NewsDto = await _http.GetFromJsonAsync<NewsDto>(Const.ApiSiteUrl + $"/api/News/{Id}");

        var commentSearch = new NewsCommentSearchItem()
        {
            HasPaging = true,
            ItemPerPage = 1,
            NewsId = int.Parse(Id),
            PageId = PageId
        };
        var response = await _http.PostAsJsonAsync(Const.ApiSiteUrl + "/api/FilterComment", commentSearch);
        Comment = await response.Content.ReadFromJsonAsync<PagedResult<NewsCommentDto, NewsCommentSearchItem>>();
        PageCount = Comment.CountAll / Comment.ItemPerPage;
    }

}
